# palette -- draw a palette in the 3tpp rgb framebuffer


# bugs:
#	i'm seeing yellow & 2 grey on row 0, 2 grey on row 1, 1 grey on row 2
#		offset and something else?
#		inverting that last trit... no difference!
#		moving chosen pixel positions...
#		same pattern except bottom pixel is 3 lines up and about 3px left.
#		with a color bg, the odd yellow pixel isn't yellow any more.
#			on a black bg, it's blue!
#	i think the pixels within a word are in the wrong order.
# 		to fix, invert that last trit.
#	pixval multiplied is just 000000000


gotodata;>start


### constants

# 114x81
null;0000+++-0;fbx
null;0000+0000;fby
null;+++++++++;fbtop

# pixel offset lookup table
null;00000000+
null;00000+000;pixtbl
null;00+000000

### api registers

null;;pixx
null;;pixy
null;;pixval

### internal registers

null;;fb0
null;;pixtmp


########################
# routines

### draw pixel

## compute x,y to linear pixel number - 1, and store in in pixtmp.
# 1 is subtracted because word address must be 0-based
# but last trit must be neg-based to fit 3 positions in 1 trit.
romread1;>pixy;pixdraw
romread2;>fbx
multiply
romread2;>pixx
add
setreg2;00000000+
subtract
setdata;>pixtmp

TTYwrite;:enter
dumpreg1
TTYwrite;: 
TTYwrite;:L
TTYwrite;:P
TTYwrite;:N
TTYwrite;:-
TTYwrite;:1

## convert to word address and store in mempoint.
# 3 extra lines because divide rounds wrong for this purpose.
offsetlen;on,1,8
romread1;>pixtmp
offsetlen;off,0,9
setreg2;0000000+0
divide
romread2;>fb0
add
ptset

dumpreg1
TTYwrite;: 
TTYwrite;:a
TTYwrite;:d
TTYwrite;:d
TTYwrite;:r

# get the last trit of the lpn and translate it to offset:
# '-' to 0 to '--'
# '0' to 3 to '0-'
# '+' to 6 to '+-'
# oh right! multiply by +0 and add -; simple!
# or multiply by +000 and add -00 to save a multiply.
# add -+- to set C to 3 at the same time.

# here, pixtmp contains lpn-1
offsetlen;on,0,1
romread1;>pixtmp
offsetlen;off,0,9
invert
# invert because display is big-endian
setdata;>pixtmp
setreg2;00000+000
multiply
setreg2;000000-+-
add
setdata;>pixoff

dumpreg1
TTYwrite;: 
TTYwrite;:p
TTYwrite;:i
TTYwrite;:x
TTYwrite;:o
TTYwrite;:f
TTYwrite;:f

# left shift computation for the pixel data:
#	trt	multiplier
#	-	00000000+
#	0	00000+000
#	+	00+000000
# lookup table

# pixtmp now contains just the last trit
romread1;>pixtmp
romread2;>pixtbl
add
setdata;>pixgetmul
romread1;000000000;pixgetmul
romread2;>pixval
multiply

dumpreg1
TTYwrite;: 
TTYwrite;:p
TTYwrite;:i
TTYwrite;:x
TTYwrite;:v
TTYwrite;:a
TTYwrite;:l
TTYwrite;: 
TTYwrite;:m
TTYwrite;:u
TTYwrite;:l
TTYwrite;:t
TTYwrite;:i
TTYwrite;:p
TTYwrite;:l
TTYwrite;:i
TTYwrite;:e
TTYwrite;:d

# finally write pixel
offsetlen;000000000;pixoff
ptwri
offsetlen;off,0,9

# didn't use goto in all that!
continue


###########################
# main

null;;start


### init display

romread1;>fbx
romread2;>fby
multiply
copy1to2
romread1;>fbtop
subtract
setdata;>fb0

dumpreg1
TTYwrite;: 
TTYwrite;:f
TTYwrite;:b
TTYwrite;:0

setreg1;---------
IOwrite1;>dispmode
romread1;>fb0
IOwrite1;>dispoffset

## fill with black
# ehh, i like the grey of 000000000, but i need to see if the region matches.
# takes 2 or 3 seconds to fill.

gotodata;>fbstriped

# fb0 still in reg1
ptset
romread2;>fbtop
#setreg1;---------;fbfillloop
setreg1;+++++++++;fbfillloop
ptwri
ptinc
# 	test
#setreg2;00000000+
#add
#setdata;>fbfillloop
#romread2;>fbtop
# 	end -- this bit works!
ptget
gotodataif;>fbfillloopend
gotodata;>fbfillloop

ptset;;fbstriped
romread2;>fbtop
#setreg1;-00+00-00;fbfillloopc
setreg1;---+++---;fbfillloopc
ptwri
ptinc
invert1
setdata;>fbfillloopc
ptget
gotodataif;>fbfillloopend
gotodata;>fbfillloopc


setreg1;000000000;fbfillloopend
IOwrite1;>dispupdate


### very simple test

# test with grey pixel
romread1;>fb0
# â†‘ was setreg, oops
setreg2;00000+000
add
# works without the add, in the top left as proper,
# but i want to use that corner for another test below.
ptset
setreg1;+0-0+--0+
#   pleasant colors!
ptwri
setreg1;000000000
IOwrite1;>dispupdate
# yes, high trit is left.



### simple first-test code
#write green pixel at 8,8, yellow at 9,9, red at 10,10.

setreg1;000000-+-
setdata;>pixval
setreg1;000000+0-
setdata;>pixx
setdata;>pixy
gotodata;>pixdraw

setreg1;000000++-
setdata;>pixval
setreg1;000000+00
setdata;>pixx
setdata;>pixy
gotodata;>pixdraw

setreg1;000000+--
setdata;>pixval
setreg1;000000+0+
setdata;>pixx
setdata;>pixy
gotodata;>pixdraw


### update display

setreg1;000000000
IOwrite1;>dispupdate


stop
