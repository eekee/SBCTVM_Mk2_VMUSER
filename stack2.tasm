# stack routines with simple tests

# differences to stack1:
#	renames: bstack->dstack, stack->rstack
#	optimization: top and 2nd of stack are 
#		held in fixed locations.

# PLAN:
# memory registers for top and second of stack 
# would almost certainly improve performance.

# TO DO
#
# overall:
#	stack/bstack -> rstack/dstack
#		rstack grows down, so underflow means wrap 
#		to beginning, which could be used to catch 
#		an underflow.
#		kept labels:
#			in test routines (because not important)
#			stackinit
#			stackreg1bak
#	ram registers for top & second of stack
#		fix to use the ram registers:
#			base routines 
#			utility routines 
#



# change old stack names: DONE
#	Edit ,y/#.*/x/b(stack|push|pop)/x/b/c/d/
#	Edit ,y/#.*/y/stackinit|stackreg1bak/y/textstart(.|\n)+textstop/x/[^a-z](stack|push|pop)/x/[a-z]+/i/r/
# regexp 'greedy matching' means the above doesn't work.
#	Edit ,y/#.*/y/stackinit|stackreg1bak/x/[^a-z](stack|push|pop)/x/[a-z]+/i/r/
# check for old stack names in comments:
#	Edit ,x/b(stack|push|pop)/=
# can't really search for the old main stack names without excluding comments:
#	Edit ,y/#.*/y/stackinit|stackreg1bak/x/[^a-z](stack|push|pop)/=






### limits needs and details:

# namespace:
#	stack*
#	dstack* dpush dpop
# optional:
#	rstack* rpush rpop

# push and pop reg1 only. use regswap etc. for reg2.

# the routines don't preserve registers because that takes
# extra space and time and is sometimes unneccessary.
# the push routines save reg1 out of necessity,
# so if you need to preserve it you can omit the save.
# restore it like this:
#	romread1;>stackreg1bak

# "rstack" grows down. optional "dstack" grows up.
# "push" is 10 instructions, "pop" 7.

# the size of this file (compared with sbctvm stock troms)
# makes me wonder if there was a time when even the stack
# was considered bloatware. :)



gotodata;>stackinit

# test data
null;+0+0+0+0+;reg1pat1
null;0+0+0+0+0;reg2pat1
null;-0-0-0-0-;reg1pat2
null;0-0-0-0-0;reg2pat2

# stack pointer etc
null;+++++++++;rstackbase
null;;rstacktop
null;;stackreg1bak
null;+++------;dstackbase
null;;dstacktop

# some dstackbase values with space for
# the 2 stacks and remaining memory:
# ++++-----	242		19441	1%
# +++------	728  		18955	3%
# ++-------	2186		17497	11%
# +--------	6560		13123	33% lol

# to reverse the direction of dstack, 
# change 00000000+ to 00000000- in 3 places:
# push pop and the line labelled 'dstackdumploop'.


############################
### initialization

# can't use 'continue' because it calls dpush.

romread1;>rstackbase;stackinit
setdata;>rstacktop
# if not using dstack omit remainder
romread1;>dstackbase
setdata;>dstacktop
# underflow marker for dstack, may help in debugging;
# 2 lines doubly optional:
setreg1;-+-+-+-+-
gotodata;>dpush


#######################
### test code

# with some usage examples commented

textstart

Testing main rstack
~~~~~~~~~~~~~~~~~~

Pre-rpush data:
textstop

## push examples:
romread1;>reg1pat1
dumpreg1
gotodata;>rpush
# you can only push from register 1.
romread2;>reg2pat1
dumpreg2
copy2to1
gotodata;>rpush

## some stack examination
# not basic usage.
textstart


Stack pointer,
contents of top and base of rstack:
textstop
romread1;>rstacktop
dumpreg1
setreg2;00000000+
add
setdata;>sptmp
romread2;000000000;sptmp
dumpreg2
romread1;>rstackbase
setdata;>sptmp2
romread2;000000000;sptmp2
dumpreg2

textstart


Post-rpop data:
textstop

## pop examples:
# you can only pop to register 1
gotodata;>rpop
copy1to2
dumpreg2

gotodata;>rpop
dumpreg1

TTYwrite;:enter
userwait


# use the d stack in the same way.

textstart

Testing d rstack
~~~~~~~~~~~~~~~

Pre-rpush data:
textstop
romread1;>reg1pat2
dumpreg1
gotodata;>dpush
romread2;>reg2pat2
dumpreg2
copy2to1
gotodata;>dpush

textstart


Data rstack base and pointer,
contents of top and second of data rstack:
textstop
romread1;>dstackbase
dumpreg1
romread1;>dstacktop
dumpreg1

setreg2;00000000-
add
setdata;>bsptmp
romread2;000000000;bsptmp
dumpreg2

romread1;>dstacktop
setreg2;0000000-+
add
setdata;>bsptmp2
romread2;000000000;bsptmp2
dumpreg2

#romread1;>dstackbase
#setdata;>bsptmp2
#romread2;000000000;bsptmp2
#dumpreg2

textstart


Post-rpop data:
textstop
gotodata;>dpop
copy1to2
dumpreg2
gotodata;>dpop
dumpreg1


TTYwrite;:enter
userwait

## stack dump routines
# can't use continue because they have loops.

textstart

Testing rstack dump
~~~~~~~~~~~~~

Loading 4 values into main rstack and dumping it:
textstop
romread1;>reg1pat1
gotodata;>rpush
romread1;>reg2pat1
gotodata;>rpush
romread1;>reg1pat2
gotodata;>rpush
romread1;>reg2pat2
gotodata;>rpush

romread1;>rstacktop
setreg2;00000000-;rstackdumploop
subtract
setdata;>rstackdump1
romread2;000000000;rstackdump1
dumpreg2
romread2;>rstackbase
gotodataif;>rstackdumpdone
gotodata;>rstackdumploop
null;;rstackdumpdone

textstart


Loading 4 values into data rstack and dumping it:
textstop
romread1;>reg1pat1
gotodata;>dpush
romread1;>reg2pat1
gotodata;>dpush
romread1;>reg1pat2
gotodata;>dpush
romread1;>reg2pat2
gotodata;>dpush

romread1;>dstacktop
setreg2;00000000+;dstackdumploop
subtract
setdata;>dstackdump1
romread2;000000000;dstackdump1
dumpreg2
romread2;>dstackbase
gotodataif;>dstackdumpdone
gotodata;>dstackdumploop
null;;dstackdumpdone
textstart


The fifth value is the underflow flag rpushed in initialization.
textstop

TTYwrite;:enter
stop


##########################
### other example code

## subroutine call

# call:
setreg1;>retpt
gotodata;>rpush
gotodata;>subr
null;;retpt

# note registers trashed by the push before the call.
# they could be reloaded between the two gotodatas.

null;;subr
# ...
# return:
gotodata;>rpop
gotoreg1

## to reset the stack, copy stackinit


############################
### main (or return) stack routines

## push
# pushes reg1 to the stack
# trashes reg1, reg2

setdata;>stackreg1bak;rpush

romread1;>rstacktop
setdata;>rstackpushme
romread1;>stackreg1bak
setdata;000000000;rstackpushme

romread1;>rstacktop
setreg2;00000000-
add
setdata;>rstacktop

continue

## rpop
# pops top of stack into reg1
# trashes reg2

romread1;>rstacktop;rpop
setreg2;00000000-
subtract
setdata;>rstacktop
setdata;>rstackpopme
romread1;000000000;rstackpopme
continue


##########################
### b stack routines
# optional

## push
# pushes reg1 to b stack
# trashes reg1, reg2

setdata;>stackreg1bak;dpush
romread1;>dstacktop
setdata;>dstackpushme
romread1;>stackreg1bak
setdata;000000000;dstackpushme
romread1;>dstacktop
setreg2;00000000+
add
setdata;>dstacktop
romread1;>stackreg1bak
continue

## pop
# pops top of b stack into reg1
# trashes reg2

romread1;>dstacktop;dpop
setreg2;00000000+
subtract
setdata;>dstacktop
setdata;>dstackpopme
romread1;000000000;dstackpopme
continue


stop
