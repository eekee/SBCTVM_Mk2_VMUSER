instruction reference:
../textdocs/programming-the-VM/SBTCVM-asm.txt
../textdocs/instructionlist.txt
assembler source: ../SBTCVM-asm2.py
grep -n __ ../textdocs/programming-the-VM/* ../textdocs/*

Edit x/./i/\nTTYwrite;:/

would like to fix assembler, it doesn't check syntax.

small bug in assembler. the following crashes it with an IndexError:
TTYwrite;::
work around with:
TTYwrite;----0--++

../ROMS/
../VMSYSTEM/ROMS/
grep -n __ ../VMSYSTEM/ROMS/*.tasm ../ROMS/*.tasm ../ROMS/oldroms/*.tasm *.tasm

../VMSYSTEM/ROMS/fib.tasm
	big example
../ROMS/addloop.tasm
	instruction speed test: 19682 * 5 = 98410 instructions in 3 seconds.
	about 33kips then.

>>choose license

what's this?
../textdocs/IObanklist-full.txt
../textdocs/IObanklist-summary.txt

multi-trom: the .streg files in ../VMSYSTEM/ROMS/
need to better test communicating via scratch memory.

git handling of ..:
i want my repo to follow the main one.
i want to branch only when i have a major feature to add.
	then i *maybe* want the branch to correspond to a new fork on github.


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ PROGRAMS

ideas and actual work, the latter marked with '$'.
to-do marked with '>'.

~ stock code
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
$ trit input
	$ tritin.tasm
$ stack
	vital! there is no stack and only single-level return. (continue.tasm)
	$ stack1.tasm -- base with tests
	$ stack1pt.tasm -- stack1 rewritten with pt* instructions.
		not the best idea. it saves only 1 instruction in push or pop together. 
		mempoint is very useful for long runs of data elsewhere, and 
		saving it to call push or pop is more instructions than saving reg2.
	renamed stack2 as scal, moved it to simple programs.
dictionary
	jumping straight to this. some string handling can be a part of it.
	$ dict.tasm
	$ dict.tests
	it's heavy going. should have written string comparison separately.
>>>	it's also huge, should test parts separately.
string handling
	../textdocs/SBTCVM-6-trit-Text-encoding.txt
	input from keyboard -- in dict
	output to tty -- will be in dict
	string comparison -- in dict
	integer<->balanced ternary string conversion
	integer<->decimal string conversion
	store text in command words
		same size, 6 trits. there's 3078 unused command words 
		alongside a 3-trit rgb framebuffer. enough for some notes!
	pack 5 chars into 2 locations:
		3 in the 2 data words, 
		2 in the command words.
directional movement key routines
linked list traverser
	in dict
interrupt routines
	example structure for enabling/disabling interrupts.
	routines to push everything on interrupt, and restore it at end.
	maybe not needed. in writing dict, i turned the problem on its head,
	enabling interrupts only when they're wanted. 
	for sbtcvm, this makes sense.
inter-trom rpc and data passing
	intertrom.txt
	need to retry since changes, i think.
7-seg display
	for easy score display in games
draw string in graphics mode(s)

~ simple programs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
$ character set display
	chars.tasm
	> working on paged number:character display.
palette in the color framebuffer
	lots of offsetlen work i'm sure, good practice for 
	font drawing and other graphic region copying.
	$ palette.tasm -- getting there, but still major bugs
	now i see how slow filling the screen is, 
	i'm feeling less enthusiastic about mk2 graphics in general.
calculator, tty display
	$ scal.tasm -- rpn calculator based on stack1 and tritin.
calculator, graphical display
clock, digital
	7-seg in the mini color display
clock, analogue
	easy enough with the vector graphics in the mini displays

~ benchmark
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
the two lots of stack code; with vs without pt*
	maybe include the extra register saving.

~ complex programs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
forth
	forth.txt
	stack code above.
	$ words.tasm -- parser testbed.
	squashname is an optimization which was holding me back.
text editor
	with the forth
binary computer emulator XD

~ games
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
simple: key response; single-pixel drawing; no timing; trivial generator
	robots
	black box
simple running as above, but perhaps more coding work:
	hangman
		word list needs composition and several routines.
	unequal
	towers
	magnets
	unruly
	others from sgt puzzles
		all need cursor and/or x/y addressing.
other
	snake
		timing, key response, simple drawing
	moon buggy
		timing, key response, 'blitting' when the buggy jumps or crashes
	
get ideas for some above from bsd games:
	https://cvsweb.openbsd.org/cgi-bin/cvsweb/src/games/
	i think snake game is 'worm'.
others from sgt puzzles:
	???


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ WANTED

not asking, keeping track of what i hope i can add some day.

~ CISCing it up to save instructions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* shifts, especially because divide rounds wrong for some uses.
	defeating wrong rounding requires 3-4 instructions 
	to truncate before division.
* immediate arithmetic ops, adddata subdata muldata divdata, 
	to save using reg2 and the instruction loading it.
	very common case, would save a lot.
	in this architecture, this covers increment and decrement too.

~ interruptable wait
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
probably the simplest key to sane interrupt handling.
see 'threading' in the next section.
or maybe rom switching could make it easier without this.

~ save trom
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
probably the simplest way to get permanent storage.
it'll overwrite, preserving data is the user's responsibility.
i use git, or files can be copied of course, and in case of 
disaster the original trom can be restored by assembling again.
maybe a menu entry, "save trom (overwrite)".
what does it do with multiple troms though?

then i thought of using multiple troms like disks. 
i'd want to save a particular trom or troms without 
error-prone menu picking every time.
so i'd want to save by program command, not menu.

~ disassembler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
to go with saving the trom. apart from disassembly itself, 
its most useful function may be finding strings in the trom, 
and translating them to ascii.
i'm thinking it could remember the last data cells so long as 
every one corresponds to a character. when non-character data 
is encountered, if more than n cells are saved, they are written 
into the disassembly in a format similar to textstart/textstop.


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ HOWTO

techniques more than hardware access.

~ emulate indirect addressing
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
stack1.tasm does it like this:
	romread1;>stacktop
	setdata;>stackpushme
	romread1;>stackreg1bak
	setdata;000000000;stackpushme
pt* are probably better.
	see -asm.txt (which is now updated with them) and 
	../ROMS/testmempt.tasm
	not very much better. it's another register, which is nice, 
	but barely saves any instructions.
	

~ jumps, loops, conditionals
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
so important i'm putting them here.
cmd|data|label
	define label. data required in this case.
gotodata|>label
	obvious
gotoreg1
	register index yay!
	not used in any stock roms. works fine though.
gotodataif|>label
	jump if reg1 == reg2
gotoifgreater|>label
	jump if reg1 > reg2
../ROMS/addloop.tasm
stack1.tasm:/stackdump

~ copy memory region
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
? :)


~ trit manipulation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
offsetlen
	../ROMS/testoffsetlen.tasm
	../textdocs/programming-the-VM/SBTCVM-asm.txt:/offsetlen
	../textdocs/programming-the-VM/offsetlength.txt
offsetlen.tasm
new description:
["offsetlen"
-0-++0
defines a masking window, only trits visible 
through the window are written to the destination.

usage:
	offsetlen|A,B,C
if A is "off", the remaining trits in the destination are preserved.
if it is "on", they are overwritten with 0.
B is the offset for the window's low-value edge (the right side).
C is the size of the window, the length extending toward high values.
affected operations are read and write to IO and memory.
the window remains active until reset with "offsetlen|off,0,9".
see also: romread* setdata IOread* IOwrite*
]
truncation may be greater than the number of chars without affecting it.
to compute the offset code:
	????ABBCC
	A: 0=off; +=on
	B: subtract 4 (0000000++) from desired offset
	C: subtract 5 (000000+--) from desired length
but see offsetlength.txt when it's not a straight number; e.g. linear pixel number.

~ threading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
this seemed like something i wasn't going to bother with, 
until i realised it might be a way around the problems with 
interrupts. maybe all the key input could be handled by 
one thread, (the main thread is the only one which can,)
while all the actual action happens in another thread.
nnnope! you have to have a running mainloop -- no "wait" -- 
for key interrupts to work properly, and that would halve the 
speed of the other thread.

~ scratch memory
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
how much is there? 729 words.
it's at the lowest addresses on the iobus, from --------- to ---++++++.
	these locations are aliased by labels "mem1" to "mem729".
can it be used for communication between multiple loaded troms?
	interesting question!


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ KEYBOARD

interrupt per key only, i think. ridiculous, but not painful.
available keys: 
	1-9 + - a-z space enter

reuse or reference ../ROMS/keytest.tasm , it's got all the keys.

DOC BUG:
../textdocs/programming-the-VM/keyboard-inter.txt
	does not give the asm names.
	(it's not a useful document for me until i want to write an assembler)

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ FRAMEBUFFER GRAPHICS

modes:
code  	#	x	y	t/c	words	%mem
---------	G0	114	81	3c	3078	16
--------+	G2	114	81	1m	1026  	5
-------0-	G3	54	38	3c	684		3.5
-------00	G4	54	38	1m	228		1.2

requires explicit update. see a generated trom.

~ tritmaps
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
how to copy?
there are pointer operations using r1. i'm sure it's possible using this.

~ drawing text
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
there's not much room.
6x7 pixel chars = 19x11 colsXrows
6x8 = 19x10
6x6 = 19x13

~ expansionism
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
i thought of taking the low res mono and 3x3-ing it.
it would take up half (47%) of a 'rom'.
it might be reasonable if one 'rom' is a display server.
it would allow 57x34 or 57x30 chars, depending on 6x7 or 6x8 char cell.
non-square pixels might be more reasonable, but all this is still underwhelming.
another trick: 2 trits encoding 3 pixels. i'm sure i'd hate it. :)

114 is not a great width for 1tpp, it's not a multiple of 9.
243 is, and it's only just over double.
the corresponding vertical resolution would be 173 (or maybe 172).
such a mode would take 4671 words, or 23% of a rom. large, but not impossible.
with 2:3 pixels, it would have 115 lines and take 3105 words, 16%. 
same as 3-trit color!

i'd rather have a char cell mode.

~ roms
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../ROMS/invertdemo1.tasm
	writes to display memory

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ SIDE GRAPHICS

~ colors & blanking
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
colorfill;color
	blank it with the color
setcolorreg;color
	set the color to draw with
monofill;???????mm
	blank it with shade 'mm'

'color' here is 6 trit rgb. it may be specified as e.g. 255,255,255

~ drawing operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
colorpixel;???xxxyyy
setcolorvect;???xxxyyy
colorrect;???xxxyyy
colorline;???xxxyyy
monopixel;???xxyymm
setmonovect;???xxyy??
monorect;???xxyymm
monoline;???xxyymm
../VMSYSTEM/ROMS/intro.tasm:/TTYclear..vectdemo
	

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ TTY

72x27 or 72x54
