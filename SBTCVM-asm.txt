SBTCVM Assembler documentation. 

for SBTCVM Mark 2 Assembler v2.2.0


command line usage:
This is SBTCVM-asm2.py, SBTCVM Mark 2's assembler.
commands:
SBTCVM-asm2.py -h (--help): this text
SBTCVM-asm2.py -v (--version)
SBTCVM-asm2.py -a (--about): about SBTCVM-asm2.py
SBTCVM-asm2.py -c (--compile) [sourcefile]: build a tasm source into a trom
SBTCVM-asm2.py -t (--tracecompile) [sourcefile]: same as -c but logs the compiling process in detail in the CAP directory.
SBTCVM-asm2.py [sourcefile]: build a tasm source into a trom


for example, a source file called "file.tasm", will be compiled into the SBTCVM TROM: "file.trom"

it is possible to edit the trom directly, but can be more difficult.

tracelogs (enabled by compiling using the -t option) are based on the name of the source file and are located in the CAP directory.
example: intro.tasm would have a tracelog called intro-tasm-comp.log

instructions that need 6-trit RGB colors as data (listed below) can use this special formatting:
R,G,B where R G and B are respective color channels with values ranging from 0 to 255
example:
colorfill|255,255,255 is white

	colorfill
	setcolorreg
	TTYbg


note: while SBTCVM-asm does make programming for SBTCVM mark 2 easier
a basic understanding of both how conventional computers work, 
and balanced ternary mathematics, is still needed.

comments:
comments can be achieved as such:
"#comment"

Multiline text blocks:

	start command:
	"textstart"
	
	end command:
	"textstop"


to pad memory space, use "null". 

SBTCVM-asm will fill any remaining TROM space with "null" automatically.

basic commands:

These correspond to SBTCVM Mk1.1 Opcodes:
any data specified should be specified  as such:
'null|?????????'
SBTCVM has a pointer feature for data-based gotos and data/instruction modifiers.

-where ? is a balanced ternary digit
-Mark 2 uses 9-trit data. so does the assembler.
-note the vertical bar "|"
-note omitting the vertical bar and data will cause the data to default to ground. (000000000)
-for compatibility reasons, six trit integers are padded like so: 000??????


define a pointer like this:
'null|000000000|thisisanexample'
notice how the data should be present in this usage even if it is 000000000.


on certain instructions you may point to a pointer as such:
'gotodata|>thisisanexample'
'gotodataif|>thisisanexample'
'YNgoto|>thisisanexample'
'setdata|>thisisanexample'
'setinst|>thisisanexample'
'romread1|>thisisanexample'
'romread2|>thisisanexample'
'setreg1|>thisisanexample'

similar shortcuts exist for various IOaddress points:
"random" | random integer port "--0------" (read only)
"mem1" - "mem729": scratchmemory shortcuts. (write/read)




"romread1"
------
read data from rom address into register 1.
example:
	romread1|>tromval1
	...
	null|+++++++++|tromval1
see also: setdata

"romread2"
-----0
read data from rom address into register 2.

"IOread1"
-----+
IOread  1
(first register)

"IOread2"
----0-
IOread  2
(second register)

"IOwrite1"
----00
IOwrite 1
(first register)

"IOwrite2"
----0+
IOwrite 2
(second register)

"regswap"
----+-
swap primary registers

"copy1to2"
----+0
copy register 1 to 2

"copy2to1"
----++
copy register 2 to 1

"invert1"
---0--
invert register 1

"invert2"
---0-0
invert register 2

"add"
---0-+
add registers 1 and 2, storing the result in register 1.

"subtract"
---00-
subtract

"multiply"
---000
multiply register 1 by register 2, storing the result in register 1.
on overflow, the result will be mpi or mni.

"divide"
---00+
integer division

"setreg1"
---0+-
set register 1. example:
	setreg1;0000000+0
-supports pointer referencing (see above)
example:
	setreg1;>foo
	# store it somewhere, load it later, then:
	gotoreg1

"setreg2"
---0+0
set register 2

"setinst"
---0++
set instruction of rom address DATA using register 1 [IIIIII???]
-supports pointer referencing (see above)

"setdata"
---+--
set data of rom address DATA using register 1 [DDDDDDDDD]
-supports pointer referencing (see above)
example:
	setdata;>reg1bak
	...
	null;000000000;reg1bak
see also: romread1

"continue"
---+++
go to instruction following last goto instruction.
only one address is remembered. 
if you try to use continue twice with no goto in between, 
behaviour is undefined.


>>>basic color display commands<<<

"colorpixel"
--0---
COLORDISP draw pixel using DRAWCOLOR using data ???XXXYYY
((Tip: draw same color pixels together between color changes)

"setcolorreg"
--0--0
SET DRAWCOLOR using data ???CCCCCC where C is a 6-trit RGB color :D

"colorfill"
--0--+
fill COLORDISP using data ???CCCCCC where C is a 6-trit RGB color :D

"setcolorvect"
--0-0-
set colordisp vector register
(for filled rectangle and line instructions) ???XXXYYY

"colorline"
--0-00
draw color line ???XXXYYY

"colorrect"
--0-0+
draw color filled rectangle ???XXXYYY


>>>basic Mono Display commands<<<

"monopixel"
--0-+-
MONODISP draw pixel using data ???XXYYMM
where M=is a 2 trit monochrome value

"monofill"
--0-+0
fill COLORDISP using data ???????MM
where M=is a 2 trit monochrome value

"setmonovect"
--0-++
set monodisp vector register 
(for filled rectangle and line instructions ???XXYY??

"monoline"
--00--
draw line  ???XXYYMM
where MM is a 2 trit greyscale color value.

"monorect"
--00-0
draw filled rectangle ???XXYYMM
where MM is a 2 trit greyscale color value.

>>>end basic display commands<<<


"stop"
--000-
stop (shuts down VM)

"null"
000000
null command
(--0000 may be a valid alternate, but the assembler generates 000000.)

"gotodata"
--000+
goto data specified ROM address
-supports pointer referencing (see above)

"gotoreg1"
--00+-
goto reg1 specified ROM address

"gotodataif"
--00+0
goto data specified ROM address IF REG 1 & 2 ARE EQUAL
-supports pointer referencing (see above)

"gotoifgreater"
--0+0-
goto data specified ROM address IF REG 1 is greater than REG 2.
-supports pointer referencing (see above)


"wait"
--00++
wait a specified time.
example:
	wait|:0.2
the time is encoded as a fixed point number 
between 0 and 19.683 inclusive.

"YNgoto"
--0+--
YN user goto. asks user to confirm goto. ( ROM Address data specified)
(best used with a label explaining what it does.)
-supports pointer referencing (see above)

"userwait"
--0+-0
user wait.

"TTYclear"
--0+-+
TTY clear


>>>Rom switching GOTOs<<<

(the following gotos switch TROMS! make sure config setup is done properly! also note that none of these gotos support pointer referencing!)

"gotoA"
--+---
A mandatory goto  

"gotoAif"
--+--0
A reg equal goto

"gotoB"
--+--+
B mandatory goto

"gotoBif"
--+-0-
B reg equal goto

"gotoC"
--+-00
C mandatory goto

"gotoCif"
--+-0+
C reg equal goto

"gotoD"
--+-+-
D mandatory goto

"gotoDif"
--+-+0
D reg equal goto

"gotoE"
--+-++
E mandatory goto

"gotoEif"
--+0--
E reg equal goto

"gotoF"
--+0-0
F mandatory goto

"gotoFif"
--+0-+
F reg equal goto

>>>end Rom switching GOTOs<<<


"dumpreg1"
--++0+
dump register 1 to TTY

"dumpreg2"
--+++-
dump register 2 to TTY


"setregset"
-0-000
set minor system register. see regset.txt

"regset"
-0-00+
set minor system register. see regset.txt


"TTYwrite"
--+++0
tty write port (direct) (???CCCCCC) where CCCCCC is the SBTCVMtext 6-trit character code.
or you can use 
TTYwrite|:? where ?=single character (or "space" for a space or "enter" for a newline)

"buzzer"
--++++
buzzer port (direct)
???TFFFFF where T is time and FFFFF is frequency code
	time codes:
	+   0.3 seconds
	0   0.2 seconds
	-   0.1 seconds

"TTYlinedraw"
toggles The regset flag controlling wether the tty updates on each character,
or just on newlines. (SBTCVM Mark 2 defaults this flag to per character)
use 
TTYlinedraw|on to enable and TTYlinedraw|off to disable.
(macro using the regset mechanism; expands to 2 instructions.)

"TTYbg"
set TTY background color through regset.
SET using data ???CCCCCC where C is a 6-trit RGB color :D
(6-trit color enhanced)
(macro using the regset mechanism; expands to 2 instructions.)

"setkeyint"
-0-+++
(see keyboard-inter.txt)
set keyinterrupt register. (used to select a key interrupt to activate.)
 ?????DDDD=4-trit scancode
you can use setkeyint|:? where ?=codelabel (see list in keyboard-inter.txt)

"keyint"
-00---
(see keyboard-inter.txt)
keyboard interrupt. (data)DDDDDDDDD=rom address to goto on interrupt.


"offsetlen"
-0-++0

A is either "on" or "off" if on, the offset length system will use ground 
	states in place of the states of the destination data. (default is off.)
	leave off if you are doing things like manipulating part of a number,
B is 0-8 and controls offset from radix point (default 0)
C is 1-9 and controls the offset length trit length. (default is 9)

offsetlen|A,B,C

see offsetlength.txt for more information.

"clearkeyint"
-00--0
(see keyboard-inter.txt)
clear key interrupt| ????????0=clear keyinterrupt chosen by ketinterrupt,
 ????????+=clear all keyinterrupts.
