# dict -- forth-like dictionary definition and lookup

#>>>>>>to do
# paste in stack1
# convert stack1 names to dstack, rstack
#	bstack->dstack, stack->rstack
#	Edit /b[s]tack
#	Edit /[^a-z][s]tack
# switch dstack direction
# internal routines:
#	lookup
# stack routine from scal:
#	dswap
# keyboard...
# ...

# namespace usage:
# stack: stack* dstack* rstack* dpush dpop rpush rpop
# dict: dict* key* word* lookup alloc*

# commands:
# (not really doing built-in words yet.)
# def
#	the next word is the name.
#	following words are the definition, up to '-d-'.
# see
#	read a word, find it in dictionary, print its definition

# internal routines:
# word
#	read a word
#	i think i want this first
#	i think word should set up key interrupts, spin while the word is typed, 
#	and then clear interrupts and return. yes.
# lookup
# 	find a word in the dictionary
# alloc
#	alloc memory
# stack routine from scal:
#	dswap

# how to arrange memory?
# stacks at top, of course.
# dict needs to grow somewhere.
# input buffer also required.
# i guess input buffer can be a fixed size. 
# in fact, it should be, thats the simple way.
# what size?
# 216 = 3 lines. hmm.
# if it reads a word at a time, words in a definition can go in the dictionary 
# as soon as they're entered. interpreting forth similarly would run each 
# word after it is read. no need for big buffer. yay!
# now what size? :)
# mpi of 3 trits is 13. 13 characters would be quite indulgent
# for a real language on a 19KW machine.
# 13 it is, then. -- note: now includes terminating space or enter.
# oh that's 14 including the 0. ok then.
# also need alloc routine for dict.
# buffer can be alloc'd too.


gotodata;>start


#######################
### stack data

null;+++++++++;rstackbase
null;;rstacktop
null;;stackreg1bak
null;++++-----;dstackbase
null;;dstacktop

# some dstackbase values with space for
# the 2 stacks and remaining memory:
# ++++-----	242		19441	1%
# +++------	728  		18955	3%
# ++-------	2186		17497	11%
# +--------	6560		13123	33% lol


#######################
### stack init

romread1;>rstackbase;start
setdata;>rstacktop
# if not using bstack omit remainder
romread1;>dstackbase
setdata;>dstacktop
# underflow marker for data stack:
setreg1;-+-+-+-+-
gotodata;>dpush


#######################
### dict init

setreg1;>alloc.base
setdata;>alloc.next

monofill;-------00
setreg1;00000+---
setdata;>word.buflen
gotodata;>dpush
gotodata;>alloc
gotodata;>dpop
setdata;>word.bufaddr


#######################
### dict routines

## alloc
# subroutine
# ( size -- address )

romread1;>alloc.next;alloc
gotodata;>dpush
gotodata;>dswap
gotodata;>dpop
romread2;>alloc.next;alloc
add
setdata;>alloc.next
gotodata;>rpop
gotoreg1

null;;alloc.next

## lookup


## word
# subroutine
# ( -- address length )
# input a word from the keyboard.
# return a string, including the terminating space or enter.
# sets up interrupts and clears them again; lots of lines!
# this is basically a blocking read (from the keyboard). 

monofill;-------00;word
setreg1;000000000
setdata;>word.count
setkeyint;:1
keyint;>key.1
setkeyint;:2
keyint;>key.2
setkeyint;:3
keyint;>key.3
setkeyint;:4
keyint;>key.4
setkeyint;:5
keyint;>key.5
setkeyint;:6
keyint;>key.6
setkeyint;:7
keyint;>key.7
setkeyint;:8
keyint;>key.8
setkeyint;:9
keyint;>key.9
setkeyint;:0
keyint;>key.0
setkeyint;:-
keyint;>key.neg
setkeyint;:+
keyint;>key.pos
setkeyint;:a
keyint;>key.a
setkeyint;:b
keyint;>key.b
setkeyint;:c
keyint;>key.c
setkeyint;:d
keyint;>key.d
setkeyint;:e
keyint;>key.e
setkeyint;:f
keyint;>key.f
setkeyint;:g
keyint;>key.g
setkeyint;:h
keyint;>key.h
setkeyint;:i
keyint;>key.i
setkeyint;:j
keyint;>key.j
setkeyint;:k
keyint;>key.k
setkeyint;:z
keyint;>key.z
setkeyint;:l
keyint;>key.l
setkeyint;:m
keyint;>key.m
setkeyint;:n
keyint;>key.n
setkeyint;:o
keyint;>key.o
setkeyint;:p
keyint;>key.p
setkeyint;:q
keyint;>key.q
setkeyint;:r
keyint;>key.r
setkeyint;:s
keyint;>key.s
setkeyint;:t
keyint;>key.t
setkeyint;:u
keyint;>key.u
setkeyint;:v
keyint;>key.v
setkeyint;:w
keyint;>key.w
setkeyint;:x
keyint;>key.x
setkeyint;:y
keyint;>key.y
setkeyint;:z
keyint;>key.z
setkeyint;:space
keyint;>key.space
setkeyint;:enter
keyint;>key.enter

# near-white rectangle to signify ready:
setmonovect;---0-0---
monorect;---0+0++-

gotodata;>word.spinloop;word.spinloop

clearkeyint;+++++++++;word.finalize
monofill;-------00
romread1;>word.bufaddr
gotodata;>dpush
romread1;>word.count
gotodata;>dpush
gotodata;>rpop
gotoreg1

null;;word.count
null;;word.bufaddr
null;;word.buflen


# key routines for word:

setdata;>word.keytmp;word.keyproc
romread1;>word.bufaddr
romread2;>word.buflen
add
ptset
romread1;>word.keytmp
ptwri
setreg1;00000000+
add
romread2;>word.buflen
gotodataif;>word.keyproc.beep
romread1;>word.keytmp
setreg2;:space
gotodataif;>word.finalize
setreg2;:enter
gotodataif;>word.finalize
gotodata;>word.spinloop

clearkeyint;+++++++++;word.keyproc.beep
buzzer;----00000
gotodata;>word.finalize

null;;word.keytmp

## key interrupt routines:

TTYwrite;:space;key.space
setreg1;----0-00+
gotodata;>word.keyproc
TTYwrite;:enter;key.enter
setreg1;----0-000
gotodata;>word.keyproc

## autogenerate most key interrupt routines:
# the type of operation doesn't really accommodate sed -n with /regexp/p, 
# it's shorter and easier to use grep.
# i could make it cover enter and space too, but it doesn't seem worth it.

#	<grep '......[a-z0-9]$' ../textdocs/SBTCVM-6-trit-Text-encoding.txt | sed 's/(.+)(.)/TTYwrite;:\2;key.\2\nsetreg1;---\1\ngotodata;>word.keyproc/'
#[
TTYwrite;:a;key.a
setreg1;---------
gotodata;>word.keyproc
TTYwrite;:b;key.b
setreg1;--------0
gotodata;>word.keyproc
TTYwrite;:c;key.c
setreg1;--------+
gotodata;>word.keyproc
TTYwrite;:d;key.d
setreg1;-------0-
gotodata;>word.keyproc
TTYwrite;:e;key.e
setreg1;-------00
gotodata;>word.keyproc
TTYwrite;:f;key.f
setreg1;-------0+
gotodata;>word.keyproc
TTYwrite;:g;key.g
setreg1;-------+-
gotodata;>word.keyproc
TTYwrite;:h;key.h
setreg1;-------+0
gotodata;>word.keyproc
TTYwrite;:i;key.i
setreg1;-------++
gotodata;>word.keyproc
TTYwrite;:j;key.j
setreg1;------0--
gotodata;>word.keyproc
TTYwrite;:k;key.k
setreg1;------0-0
gotodata;>word.keyproc
TTYwrite;:l;key.l
setreg1;------0-+
gotodata;>word.keyproc
TTYwrite;:m;key.m
setreg1;------00-
gotodata;>word.keyproc
TTYwrite;:n;key.n
setreg1;------000
gotodata;>word.keyproc
TTYwrite;:o;key.o
setreg1;------00+
gotodata;>word.keyproc
TTYwrite;:p;key.p
setreg1;------0+-
gotodata;>word.keyproc
TTYwrite;:q;key.q
setreg1;------0+0
gotodata;>word.keyproc
TTYwrite;:r;key.r
setreg1;------0++
gotodata;>word.keyproc
TTYwrite;:s;key.s
setreg1;------+--
gotodata;>word.keyproc
TTYwrite;:t;key.t
setreg1;------+-0
gotodata;>word.keyproc
TTYwrite;:u;key.u
setreg1;------+-+
gotodata;>word.keyproc
TTYwrite;:v;key.v
setreg1;------+0-
gotodata;>word.keyproc
TTYwrite;:w;key.w
setreg1;------+00
gotodata;>word.keyproc
TTYwrite;:x;key.x
setreg1;------+0+
gotodata;>word.keyproc
TTYwrite;:y;key.y
setreg1;------++-
gotodata;>word.keyproc
TTYwrite;:z;key.z
setreg1;------++0
gotodata;>word.keyproc
TTYwrite;:0;key.0
setreg1;-----0++0
gotodata;>word.keyproc
TTYwrite;:1;key.1
setreg1;-----0+++
gotodata;>word.keyproc
TTYwrite;:2;key.2
setreg1;-----+---
gotodata;>word.keyproc
TTYwrite;:3;key.3
setreg1;-----+--0
gotodata;>word.keyproc
TTYwrite;:4;key.4
setreg1;-----+--+
gotodata;>word.keyproc
TTYwrite;:5;key.5
setreg1;-----+-0-
gotodata;>word.keyproc
TTYwrite;:6;key.6
setreg1;-----+-00
gotodata;>word.keyproc
TTYwrite;:7;key.7
setreg1;-----+-0+
gotodata;>word.keyproc
TTYwrite;:8;key.8
setreg1;-----+-+-
gotodata;>word.keyproc
TTYwrite;:9;key.9
setreg1;-----+-+0
gotodata;>word.keyproc
#]


#######################
### end of code

stop;;alloc.base
